from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
import random
import string
import os
from sqlalchemy import inspect
from flask import request, jsonify
from flask import make_response
import pandas as pd
from flask import send_file
from io import BytesIO

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è SQLAlchemy
app.config['SQLALCHEMY_DATABASE_URI'] = (
    f"mysql+mysqldb://{os.getenv('MYSQLUSER')}:{os.getenv('MYSQLPASSWORD')}@"
    f"{os.getenv('MYSQLHOST')}:{os.getenv('MYSQLPORT')}/{os.getenv('MYSQLDATABASE')}"
)
app.config['UPLOAD_FOLDER'] = 'uploads'  # –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy
db = SQLAlchemy(app)  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Å—Ä–∞–∑—É

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –Ω—É–∂–Ω—ã—Ö –ø—É—Ç–µ–π
CORS(app)
CORS(app, resources={r"/attendance/*": {"origins": "http://localhost:3000"}})
CORS(app, resources={r"/upload_excel": {"origins": "http://localhost:3000"}})

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

# ==============================
# –ú–û–î–ï–õ–ò
# ==============================

class Group(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    students = db.relationship('User', backref='group', lazy=True)
    disciplines = db.relationship('Discipline', backref='group', lazy=True)

class Discipline(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    group_id = db.Column(db.Integer, db.ForeignKey('group.id'), nullable=False)
    attendance = db.relationship('Attendance', backref='discipline', lazy=True)

class User(db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(100), nullable=False)
    role = db.Column(db.String(50), nullable=False)
    group_id = db.Column(db.Integer, db.ForeignKey('group.id'), nullable=False)
    password = db.Column(db.String(100), nullable=False)

class Attendance(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    status = db.Column(db.String(10), nullable=False)
    date = db.Column(db.String(50), nullable=False)
    discipline_id = db.Column(db.Integer, db.ForeignKey('discipline.id'), nullable=False)
    student_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

class UserDiscipline(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    discipline_id = db.Column(db.Integer, db.ForeignKey('discipline.id'), nullable=False)

    discipline = db.relationship('Discipline') 

# ==============================
# –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –ò –ê–î–ú–ò–ù–ê
# ==============================

def create_tables():
    inspector = inspect(db.engine)
    if not inspector.has_table('user'):
        db.create_all()

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        admin_group = Group(id=1, name='–ê–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞')
        db.session.add(admin_group)
        db.session.commit()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
        admin = User(
            full_name='admin',
            role='admin',
            password='admin',
            group_id=1
        )
        db.session.add(admin)
        db.session.commit()
        print("üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: –§–ò–û='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', –ø–∞—Ä–æ–ª—å='admin'")

# ==============================
# –†–û–£–¢–´
# ==============================

@app.route('/register_user', methods=['POST'])
def register_user():
    data = request.get_json()
    full_name = data['full_name']
    role = data['role']
    password = data['password']
    group_id = data.get('group_id')
    discipline_ids = data.get('discipline_ids', [])

    if role not in ['student', 'teacher']:
        return jsonify({'message': 'Invalid role'}), 400

    if role == 'student' and not group_id:
        return jsonify({'message': 'Student must have a group'}), 400

    user = User(
        full_name=full_name,
        role=role,
        group_id=group_id if role == 'student' else 1,
        password=password
    )
    db.session.add(user)
    db.session.commit()

    for d_id in discipline_ids:
        db.session.add(UserDiscipline(user_id=user.id, discipline_id=d_id))
    db.session.commit()

    return jsonify({'message': 'User registered successfully'})



@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    full_name = data['full_name']
    password = data['password']
    user = User.query.filter_by(full_name=full_name, password=password).first()
    if user:
        return jsonify({
            'message': f'Welcome, {user.full_name}!',
            'role': user.role,
            'user_id': user.id
        })
    return jsonify({'message': 'Invalid credentials'}), 401

@app.route('/users', methods=['GET'])
def get_users():
    users = User.query.all()
    return jsonify([
        {
         'id': user.id,
        'full_name': user.full_name,
        'role': user.role,
        'group_id': user.group_id,
        'password': user.password
        } for user in users
    ])

@app.route('/student_disciplines', methods=['GET'])
def get_student_disciplines():
    user_id = request.args.get('user_id')
    student = User.query.get(user_id)
    if student and student.role == 'student':
        disciplines = Discipline.query.filter_by(group_id=student.group_id).all()
        return jsonify([{'id': d.id, 'name': d.name} for d in disciplines])
    return jsonify({'message': 'Student not found or not authorized'}), 404

@app.route('/teacher_disciplines', methods=['GET'])
def get_teacher_disciplines():
    user_id = request.args.get('user_id')
    user_discipline_ids = db.session.query(UserDiscipline.discipline_id).filter_by(user_id=user_id).all()
    discipline_ids = [id for (id,) in user_discipline_ids]

    disciplines = Discipline.query.filter(Discipline.id.in_(discipline_ids)).all()
    return jsonify([{'id': d.id, 'name': d.name} for d in disciplines])

@app.route('/attendance/add_bulk', methods=['POST'])
def add_bulk_attendance():
    data = request.get_json()
    role = data.get('role')

    if role not in ['teacher', 'admin']:
        return jsonify({'message': 'You are not authorized to add attendance'}), 403

    for item in data['attendance']:
        attendance = Attendance(
            student_id=item['student_id'],
            date=item['date'],
            status=item['status'],
            discipline_id=item['discipline_id']
        )
        db.session.add(attendance)
    db.session.commit()

    return jsonify({'message': '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞'})

@app.route('/groups', methods=['GET'])
def get_groups():
    groups = Group.query.all()
    return jsonify([{'id': g.id, 'name': g.name} for g in groups])

@app.route('/disciplines', methods=['GET'])
def get_disciplines():
    disciplines = Discipline.query.all()
    return jsonify([{'id': d.id, 'name': d.name} for d in disciplines])

@app.route('/create_group', methods=['POST'])
def create_group():
    data = request.get_json()
    group = Group(name=data['name'])
    db.session.add(group)
    db.session.commit()
    # —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
    return jsonify({'message': 'Group created'})


@app.route('/create_discipline', methods=['POST'])
def create_discipline():
    data = request.get_json()
    print('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', data)

    name = data.get('name')
    group_ids = data.get('group_ids', [])

    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not name or not group_ids:
        return jsonify({'message': '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}), 400

    print('üëâ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:', name, group_ids)

    for group_id in group_ids:
        print(f'‚û° –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ "{name}" –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}')
        discipline = Discipline(name=name, group_id=group_id)
        db.session.add(discipline)

    try:
        db.session.commit()
        print('‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î')
        return jsonify({'message': '–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã'})
    except Exception as e:
        db.session.rollback()
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:', str(e))
        return jsonify({'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã', 'error': str(e)}), 500



@app.route('/teacher_groups', methods=['GET'])
def get_teacher_groups():
    user_id = request.args.get('user_id')
    disciplines = UserDiscipline.query.filter_by(user_id=user_id).all()
    group_ids = set(d.discipline.group_id for d in disciplines if d.discipline)
    groups = Group.query.filter(Group.id.in_(group_ids)).all()
    return jsonify([{'id': g.id, 'name': g.name} for g in groups])


@app.route('/group_students', methods=['GET'])
def group_students():
    group_id = request.args.get('group_id')
    students = User.query.filter_by(group_id=group_id, role='student').all()
    return jsonify([{'id': s.id, 'full_name': s.full_name} for s in students])

@app.route('/attendance/view', methods=['GET'])
def view_attendance():
    group_id = request.args.get('group_id', type=int)
    discipline_id = request.args.get('discipline_id', type=int)

    students = User.query.filter_by(group_id=group_id).all()
    result = []

    for student in students:
        records = Attendance.query.filter_by(student_id=student.id, discipline_id=discipline_id).all()
        for r in records:
            result.append({
                'full_name': student.full_name,
                'date': r.date,
                'status': r.status
            })

    return jsonify(result)

@app.route('/student_attendance', methods=['GET'])
def student_attendance():
    user_id = request.args.get('user_id', type=int)
    discipline_id = request.args.get('discipline_id', type=int)

    records = Attendance.query.filter_by(student_id=user_id, discipline_id=discipline_id).all()

    result = [
        {
            'date': r.date,
            'status': r.status
        } for r in records
    ]

    return jsonify(result)


@app.route('/attendance/report', methods=['GET'])
def attendance_report():
    group_id = request.args.get('group_id', type=int)
    discipline_id = request.args.get('discipline_id', type=int)

    students = User.query.filter_by(group_id=group_id, role='student').all()
    student_ids = [s.id for s in students]
    attendance_records = Attendance.query.filter(Attendance.student_id.in_(student_ids),
                                                 Attendance.discipline_id == discipline_id).all()

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    dates = sorted(set(r.date for r in attendance_records))

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    report_data = []
    for student in students:
        row = {'–§–ò–û': student.full_name}
        for date in dates:
            record = next((r for r in attendance_records if r.student_id == student.id and r.date == date), None)
            row[date] = '–ü—Ä–∏—Å—É—Å—Ç–≤–æ–≤–∞–ª' if record and record.status == 'present' else '–û—Ç—Å—É—Å—Ç–≤–æ–≤–∞–ª'
        report_data.append(row)

    df = pd.DataFrame(report_data)
    excel_path = 'report.xlsx'
    df.to_excel(excel_path, index=False)

    return send_file(excel_path, as_attachment=True)

@app.route('/attendance/report', methods=['GET'])
def get_attendance_report():
    try:
        group_id = request.args.get('group_id')
        discipline_id = request.args.get('discipline_id')

        # –û—Ç–ª–∞–¥–∫–∞: –ø–µ—á–∞—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—á—ë—Ç: group_id={group_id}, discipline_id={discipline_id}")
        
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # data = generate_report(group_id, discipline_id)

        return jsonify({'message': '–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω'})

    except Exception as e:
        # –ü–µ—á–∞—Ç–∞–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 500, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        return jsonify({'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞', 'details': str(e)}), 500
    

import random
import string

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
def generate_random_password(length=12):
    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'  # –°–∏–º–≤–æ–ª—ã –¥–ª—è –ø–∞—Ä–æ–ª—è
    password = ''.join(random.choice(characters) for i in range(length))
    return password


@app.route('/upload_excel', methods=['POST'])
def upload_excel():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        file = request.files['file']
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        print(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
        if not file.filename.endswith('.xlsx'):
            return jsonify({"message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è .xlsx"}), 400

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(file_path)
        print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")

        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
        df_users = pd.read_excel(file_path, sheet_name='Users')
        df_groups = pd.read_excel(file_path, sheet_name='Groups')
        df_disciplines = pd.read_excel(file_path, sheet_name='Disciplines')

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        groups_in_db = {group.name.lower(): group.id for group in Group.query.all()}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        disciplines_in_db = {discipline.name.lower(): discipline.id for discipline in Discipline.query.all()}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        for index, row in df_groups.iterrows():
            group_name = str(row['group_name']).strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
            if group_name not in groups_in_db:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ –≤ –±–∞–∑–µ
                group = Group(name=row['group_name'])
                db.session.add(group)
                db.session.commit()
                groups_in_db[group_name] = group.id  # –û–±–Ω–æ–≤–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        for index, row in df_disciplines.iterrows():
            discipline_name = str(row['discipline_name']).strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
            if discipline_name not in disciplines_in_db:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤ –±–∞–∑–µ
                group_id = groups_in_db.get('–≥—Ä—É–ø–ø–∞ 1')  # –ü—Ä–∏–º–µ—Ä –≥—Ä—É–ø–ø—ã
                discipline = Discipline(name=row['discipline_name'], group_id=group_id)
                db.session.add(discipline)
                db.session.commit()
                disciplines_in_db[discipline_name] = discipline.id  # –û–±–Ω–æ–≤–ª—è–µ–º ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        for index, row in df_users.iterrows():
            full_name = str(row['full_name']).strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            role = row['role']
            group_name = str(row['group_name']).strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
            discipline_names = str(row['discipline_names']).split(',')  # –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

            # –ò—â–µ–º –≥—Ä—É–ø–ø—É –ø–æ –∏–º–µ–Ω–∏, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            group_id = groups_in_db.get(group_name)
            if not group_id:
                print(f"–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            existing_user = User.query.filter_by(full_name=full_name).first()
            if existing_user:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{full_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
            random_password = generate_random_password()

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
            user = User(full_name=full_name, role=role, group_id=group_id, password=random_password)
            db.session.add(user)
            db.session.commit()

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ)
            for discipline_name in discipline_names:
                discipline_id = disciplines_in_db.get(discipline_name.strip().lower())  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                if discipline_id:
                    user_discipline = UserDiscipline(user_id=user.id, discipline_id=discipline_id)
                    db.session.add(user_discipline)

        db.session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        return jsonify({"message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!"}), 200

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return jsonify({"message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞", "error": str(e)}), 500


# ==============================
# –ó–ê–ü–£–°–ö
# ==============================


if __name__ == '__main__':
    with app.app_context():
        create_tables()
    app.run(debug=True)